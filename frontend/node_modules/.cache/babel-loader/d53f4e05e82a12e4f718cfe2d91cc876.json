{"ast":null,"code":"import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialValidity\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData\n    });\n  }, []);\n  return [formState, inputHandler];\n};","map":{"version":3,"sources":["/home/abdo/Documents/MERN/Traveler-app/src/shared/hooks/form-hook.js"],"names":["useCallback","useReducer","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","useForm","initialInputs","initialValidity","formState","dispatch","inputHandler","id","setFormData","inputData","formValidity"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACG,SAAK,cAAL;AACG,UAAIC,WAAW,GAAG,IAAlB;;AACA,WAAK,MAAMC,OAAX,IAAsBJ,KAAK,CAACK,MAA5B,EAAoC;AACjC,YAAID,OAAO,KAAKH,MAAM,CAACG,OAAvB,EAAgC;AAC7BD,UAAAA,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACK,OAApC;AACF,SAFD,MAEO;AACJH,UAAAA,WAAW,GAAGA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAnD;AACF;AACH;;AACD,aAAO,EACJ,GAAGN,KADC;AAEJK,QAAAA,MAAM,EAAE,EACL,GAAGL,KAAK,CAACK,MADJ;AAEL,WAACJ,MAAM,CAACG,OAAR,GAAkB;AACfG,YAAAA,KAAK,EAAEN,MAAM,CAACM,KADC;AAEfD,YAAAA,OAAO,EAAEL,MAAM,CAACK;AAFD;AAFb,SAFJ;AASJA,QAAAA,OAAO,EAAEH;AATL,OAAP;;AAWH;AACG,aAAOH,KAAP;AAtBN;AAwBF,CAzBD;;AA0BA,OAAO,MAAMQ,OAAO,GAAG,CAACC,aAAD,EAAgBC,eAAhB,KAAoC;AACxD,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBd,UAAU,CAACC,WAAD,EAAc;AACnDM,IAAAA,MAAM,EAAEI,aAD2C;AAEnDH,IAAAA,OAAO,EAAEI;AAF0C,GAAd,CAAxC;AAKA,QAAMG,YAAY,GAAGhB,WAAW,CAAC,CAACiB,EAAD,EAAKP,KAAL,EAAYD,OAAZ,KAAwB;AACtDM,IAAAA,QAAQ,CAAC;AACNV,MAAAA,IAAI,EAAE,cADA;AAENK,MAAAA,KAAK,EAAEA,KAFD;AAGND,MAAAA,OAAO,EAAEA,OAHH;AAINF,MAAAA,OAAO,EAAEU;AAJH,KAAD,CAAR;AAMF,GAP+B,EAO7B,EAP6B,CAAhC;AASA,QAAMC,WAAW,GAAGlB,WAAW,CAAC,CAACmB,SAAD,EAAYC,YAAZ,KAA6B;AAC1DL,IAAAA,QAAQ,CAAC;AACNV,MAAAA,IAAI,EAAE,UADA;AAENG,MAAAA,MAAM,EAAEW;AAFF,KAAD,CAAR;AAIF,GAL8B,EAK5B,EAL4B,CAA/B;AAMA,SAAO,CAACL,SAAD,EAAYE,YAAZ,CAAP;AACF,CAtBM","sourcesContent":["import { useCallback, useReducer } from 'react';\nconst formReducer = (state, action) => {\n   switch (action.type) {\n      case 'INPUT_CHANGE':\n         let formIsValid = true;\n         for (const inputId in state.inputs) {\n            if (inputId === action.inputId) {\n               formIsValid = formIsValid && action.isValid;\n            } else {\n               formIsValid = formIsValid && state.inputs[inputId].isValid;\n            }\n         }\n         return {\n            ...state,\n            inputs: {\n               ...state.inputs,\n               [action.inputId]: {\n                  value: action.value,\n                  isValid: action.isValid,\n               },\n            },\n            isValid: formIsValid,\n         };\n      default:\n         return state;\n   }\n};\nexport const useForm = (initialInputs, initialValidity) => {\n   const [formState, dispatch] = useReducer(formReducer, {\n      inputs: initialInputs,\n      isValid: initialValidity,\n   });\n\n   const inputHandler = useCallback((id, value, isValid) => {\n      dispatch({\n         type: 'INPUT_CHANGE',\n         value: value,\n         isValid: isValid,\n         inputId: id,\n      });\n   }, []);\n\n   const setFormData = useCallback((inputData, formValidity) => {\n      dispatch({\n         type: 'SET_DATA',\n         inputs: inputData,\n      });\n   }, []);\n   return [formState, inputHandler];\n};\n"]},"metadata":{},"sourceType":"module"}