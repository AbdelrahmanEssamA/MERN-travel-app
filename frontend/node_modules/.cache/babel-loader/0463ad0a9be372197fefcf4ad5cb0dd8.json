{"ast":null,"code":"var _jsxFileName = \"/home/abdo/Documents/MERN/Traveler-app/frontend/src/users/pages/Auth.jsx\";\nimport React, { useState, useContext } from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const authSubmitHandler = async e => {\n    e.preventDefault();\n\n    if (isLogin) {\n      try {\n        const responseData = await sendRequest('http://localhost:5000/api/users/login', 'POST', JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    } else {\n      try {\n        const responseData = await sendRequest('http://localhost:5000/api/users/signup', 'POST', JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  const switchModeHandler = () => {\n    if (!isLogin) {\n      setFormData({ ...formState.inputs,\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLogin(!isLogin);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Login Required\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, !isLogin && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Your Name\",\n    validators: [VALIDATOR_REQUIRE],\n    errorText: \"please enter your Name\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-Mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"please enter a valid email\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(6)],\n    errorText: \"please enter a valid password (min 6 characters)\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"Submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 16\n    }\n  }, isLogin ? 'Login' : 'Sign Up')), /*#__PURE__*/React.createElement(Button, {\n    inverse: true,\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Switch to \", isLogin ? 'Sign Up' : 'Login')));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/abdo/Documents/MERN/Traveler-app/frontend/src/users/pages/Auth.jsx"],"names":["React","useState","useContext","Card","Input","Button","ErrorModal","LoadingSpinner","useForm","useHttpClient","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","AuthContext","Auth","auth","isLogin","setIsLogin","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","authSubmitHandler","e","preventDefault","responseData","JSON","stringify","inputs","login","user","id","err","name","switchModeHandler","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport {\n   VALIDATOR_EMAIL,\n   VALIDATOR_MINLENGTH,\n   VALIDATOR_REQUIRE,\n} from '../../shared/util/validators';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n   const auth = useContext(AuthContext);\n   const [isLogin, setIsLogin] = useState(true);\n\n   const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n   const [formState, inputHandler, setFormData] = useForm(\n      {\n         email: {\n            value: '',\n            isValid: false,\n         },\n         password: {\n            value: '',\n            isValid: false,\n         },\n      },\n      false\n   );\n   const authSubmitHandler = async (e) => {\n      e.preventDefault();\n      if (isLogin) {\n         try {\n            const responseData = await sendRequest(\n               'http://localhost:5000/api/users/login',\n               'POST',\n               JSON.stringify({\n                  email: formState.inputs.email.value,\n                  password: formState.inputs.password.value,\n               }),\n               { 'Content-Type': 'application/json' }\n            );\n            auth.login(responseData.user.id);\n         } catch (err) {}\n      } else {\n         try {\n            const responseData = await sendRequest(\n               'http://localhost:5000/api/users/signup',\n               'POST',\n               JSON.stringify({\n                  name: formState.inputs.name.value,\n                  email: formState.inputs.email.value,\n                  password: formState.inputs.password.value,\n               }),\n               {\n                  'Content-Type': 'application/json',\n               }\n            );\n            auth.login(responseData.user.id);\n         } catch (err) {}\n      }\n   };\n\n   const switchModeHandler = () => {\n      if (!isLogin) {\n         setFormData(\n            { ...formState.inputs, name: undefined },\n            formState.inputs.email.isValid &&\n               formState.inputs.password.isValid\n         );\n      } else {\n         setFormData(\n            {\n               ...formState.inputs,\n               name: { value: '', isValid: false },\n            },\n            false\n         );\n      }\n      setIsLogin(!isLogin);\n   };\n\n   return (\n      <React.Fragment>\n         <ErrorModal error={error} onClear={clearError} />\n         <Card className=\"authentication\">\n            {isLoading && <LoadingSpinner asOverlay />}\n            <h2>Login Required</h2>\n            <hr />\n            <form onSubmit={authSubmitHandler}>\n               {!isLogin && (\n                  <Input\n                     element=\"input\"\n                     id=\"name\"\n                     type=\"text\"\n                     label=\"Your Name\"\n                     validators={[VALIDATOR_REQUIRE]}\n                     errorText=\"please enter your Name\"\n                     onInput={inputHandler}\n                  />\n               )}\n               <Input\n                  element=\"input\"\n                  id=\"email\"\n                  type=\"email\"\n                  label=\"E-Mail\"\n                  validators={[VALIDATOR_EMAIL()]}\n                  errorText=\"please enter a valid email\"\n                  onInput={inputHandler}\n               />\n               <Input\n                  element=\"input\"\n                  id=\"password\"\n                  type=\"password\"\n                  label=\"Password\"\n                  validators={[VALIDATOR_MINLENGTH(6)]}\n                  errorText=\"please enter a valid password (min 6 characters)\"\n                  onInput={inputHandler}\n               />\n               <Button type=\"Submit\" disabled={!formState.isValid}>\n                  {isLogin ? 'Login' : 'Sign Up'}\n               </Button>\n            </form>\n            <Button inverse onClick={switchModeHandler}>\n               Switch to {isLogin ? 'Sign Up' : 'Login'}\n            </Button>\n         </Card>\n      </React.Fragment>\n   );\n};\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}