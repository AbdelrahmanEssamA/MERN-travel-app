{"ast":null,"code":"var _jsxFileName = \"/home/abdo/Documents/MERN/Traveler-app/frontend/src/places/pages/UpdatePlace.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './NewPlace.css';\n\nconst UpdatePlace = () => {\n  const placeId = useParams().placeId;\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    description: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    try {\n      const fetchPlace = async () => {\n        const responseData = await sendRequest(`http://localhost:5000/api/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      };\n\n      fetchPlace();\n    } catch (err) {}\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      sendRequest(`http://localhost:5000/api/places/${placeId}`, 'PATCH', JSON.stringify({\n        title: formState.inputs.title,\n        description: formState.inputs.description\n      }), {\n        'Content-Type': 'application/json'\n      });\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"place-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 16\n      }\n    }, \"Could not find place!\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 10\n    }\n  }), !isLoading && loadedPlace && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 16\n    }\n  }, \"UPDATE PLACE\")));\n};\n\nexport default UpdatePlace;","map":{"version":3,"sources":["/home/abdo/Documents/MERN/Traveler-app/frontend/src/places/pages/UpdatePlace.jsx"],"names":["React","useEffect","useState","useParams","Card","Input","Button","ErrorModal","LoadingSpinner","useHttpClient","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","UpdatePlace","placeId","isLoading","error","sendRequest","clearError","loadedPlace","setLoadedPlace","formState","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","place","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport {\n   VALIDATOR_REQUIRE,\n   VALIDATOR_MINLENGTH,\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './NewPlace.css';\n\nconst UpdatePlace = () => {\n   const placeId = useParams().placeId;\n   const { isLoading, error, sendRequest, clearError } = useHttpClient();\n   const [loadedPlace, setLoadedPlace] = useState();\n   const [formState, inputHandler, setFormData] = useForm(\n      {\n         title: {\n            value: '',\n            isValid: false,\n         },\n         description: {\n            value: '',\n            isValid: false,\n         },\n      },\n      false\n   );\n\n   useEffect(() => {\n      try {\n         const fetchPlace = async () => {\n            const responseData = await sendRequest(\n               `http://localhost:5000/api/places/${placeId}`\n            );\n            setLoadedPlace(responseData.place);\n            setFormData(\n               {\n                  title: {\n                     value: responseData.place.title,\n                     isValid: true,\n                  },\n                  description: {\n                     value: responseData.place.description,\n                     isValid: true,\n                  },\n               },\n               true\n            );\n         };\n         fetchPlace();\n      } catch (err) {}\n   }, [sendRequest, placeId, setFormData]);\n\n   const placeUpdateSubmitHandler = async (event) => {\n      event.preventDefault();\n      try {\n         sendRequest(\n            `http://localhost:5000/api/places/${placeId}`,\n            'PATCH',\n            JSON.stringify({\n               title: formState.inputs.title,\n               description: formState.inputs.description,\n            }),\n            { 'Content-Type': 'application/json' }\n         );\n      } catch (err) {}\n   };\n\n   if (isLoading) {\n      return (\n         <div className=\"center\">\n            <LoadingSpinner />\n         </div>\n      );\n   }\n\n   if (!loadedPlace && !error) {\n      return (\n         <div className=\"center\">\n            <Card className=\"place-list\">\n               <h2>Could not find place!</h2>\n            </Card>\n         </div>\n      );\n   }\n\n   return (\n      <React.Fragment>\n         <ErrorModal error={error} onClear={clearError} />\n         {!isLoading && loadedPlace && (\n            <form\n               className=\"place-form\"\n               onSubmit={placeUpdateSubmitHandler}>\n               <Input\n                  id=\"title\"\n                  element=\"input\"\n                  type=\"text\"\n                  label=\"Title\"\n                  validators={[VALIDATOR_REQUIRE()]}\n                  errorText=\"Please enter a valid title.\"\n                  onInput={inputHandler}\n                  initialValue={loadedPlace.title}\n                  initialValid={true}\n               />\n               <Input\n                  id=\"description\"\n                  element=\"textarea\"\n                  label=\"Description\"\n                  validators={[VALIDATOR_MINLENGTH(5)]}\n                  errorText=\"Please enter a valid description (min. 5 characters).\"\n                  onInput={inputHandler}\n                  initialValue={loadedPlace.description}\n                  initialValid={true}\n               />\n               <Button type=\"submit\" disabled={!formState.isValid}>\n                  UPDATE PLACE\n               </Button>\n            </form>\n         )}\n      </React.Fragment>\n   );\n};\n\nexport default UpdatePlace;\n"]},"metadata":{},"sourceType":"module"}