{"ast":null,"code":"var _jsxFileName = \"/home/abdo/Documents/MERN/Traveler-app/frontend/src/users/pages/Users.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport UsersList from '../components/UsersList';\n\nconst Users = () => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedUser, setLoadedUser] = useState([]);\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await sendRequest('http://localhost:5000/api/users/');\n      } catch (err) {}\n    };\n\n    fetchUser();\n  }, []);\n\n  const errorHandler = () => {\n    setError(null);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: errorHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }\n  })), !isLoading, \" \", /*#__PURE__*/React.createElement(UsersList, {\n    items: loadedUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }\n  }));\n};\n\nexport default Users;","map":{"version":3,"sources":["/home/abdo/Documents/MERN/Traveler-app/frontend/src/users/pages/Users.jsx"],"names":["React","useEffect","useState","useHttpClient","ErrorModal","LoadingSpinner","UsersList","Users","isLoading","error","sendRequest","clearError","loadedUser","setLoadedUser","fetchUser","response","err","errorHandler","setError"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,aAAT,QAA8B,8BAA9B;AAEA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;AACA,MAAMC,KAAK,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDR,aAAa,EAAnE;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMa,SAAS,GAAG,YAAY;AAC3B,UAAI;AACD,cAAMC,QAAQ,GAAG,MAAML,WAAW,CAC/B,kCAD+B,CAAlC;AAGF,OAJD,CAIE,OAAOM,GAAP,EAAY,CAAE;AAClB,KAND;;AAOAF,IAAAA,SAAS;AACX,GATQ,EASN,EATM,CAAT;;AAUA,QAAMG,YAAY,GAAG,MAAM;AACxBC,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACF,GAFD;;AAGA,sBACG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAET,KAAnB;AAA0B,IAAA,OAAO,EAAEQ,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAEIT,SAAS,iBACP;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAHN,EAOI,CAACA,SAPL,oBAOgB,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEI,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPhB,CADH;AAWF,CA5BD;;AA8BA,eAAeL,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport UsersList from '../components/UsersList';\nconst Users = () => {\n   const { isLoading, error, sendRequest, clearError } = useHttpClient();\n   const [loadedUser, setLoadedUser] = useState([]);\n\n   useEffect(() => {\n      const fetchUser = async () => {\n         try {\n            const response = await sendRequest(\n               'http://localhost:5000/api/users/'\n            );\n         } catch (err) {}\n      };\n      fetchUser();\n   }, []);\n   const errorHandler = () => {\n      setError(null);\n   };\n   return (\n      <React.Fragment>\n         <ErrorModal error={error} onClear={errorHandler} />\n         {isLoading && (\n            <div className=\"center\">\n               <LoadingSpinner />\n            </div>\n         )}\n         {!isLoading} <UsersList items={loadedUser} />\n      </React.Fragment>\n   );\n};\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}